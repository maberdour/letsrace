---
description: "Standards for JavaScript, CSS, and HTML in the LetsRace project"
alwaysApply: false
---
# Coding Standards

## JavaScript
- Use modern ES6+ syntax
- Prefer const/let over var
- Use meaningful variable names
- Add JSDoc comments for functions
- Keep functions focused and single-purpose
- Use async/await for asynchronous operations
- **CRITICAL: NEVER use `type="module"` unless the JavaScript file is actually written as an ES module**
- **CRITICAL: Regular JavaScript files must be loaded without `type="module"` attribute**
- **CRITICAL: Only use `type="module"` for files that use ES6 import/export syntax**
- **CRITICAL: Test JavaScript loading in browser console to ensure no module errors**

## CSS
- Use Tailwind CSS classes when possible
- Follow BEM methodology for custom CSS
- Keep styles in assets/css/styles.css
- Use CSS custom properties for consistent theming
- Ensure responsive design with mobile-first approach

## HTML
- Use semantic HTML5 elements
- Ensure accessibility with proper ARIA labels
- Keep index.html in root for GitHub Pages deployment
- Use proper heading hierarchy (h1, h2, h3, etc.)
- Include alt text for all images

## File Organization
- Keep related functionality together
- Separate concerns (rendering, caching, events)
- Use descriptive file names
- Maintain consistent indentation (2 spaces)

## Performance Standards
- Inline critical CSS for immediate page rendering
- Load CSS synchronously for static sites (no async loading needed)
- **Eliminate unnecessary HTTP requests** - load data files directly, not through manifests
- **For static sites: minimize HTTP requests to essential files only**
- **Apply performance optimizations to ALL pages** - homepage and event pages must have identical performance
- Use DNS prefetch only for external resources (analytics)
- Implement smart caching with 23-hour expiry for event data
- Load JavaScript files in parallel, not sequentially
- Use debounced input handling (200ms) for better performance
- Implement progressive enhancement approach
- **DO NOT use service workers on GitHub Pages** (causes 404 errors)
- Use request timeouts (5s) to prevent hanging requests
- Implement AbortController for proper request cancellation
- Add cache-busting headers to prevent stale data issues
- **Target: Static sites should load in under 1 second**

## Error Handling
- Include comprehensive error handling for network failures
- Provide graceful fallbacks for missing data
- Log errors with detailed context for debugging
- Handle invalid dates and data formats gracefully
- Implement safety timeouts to prevent infinite loading (5 seconds for main content)
- Use try-catch blocks for async operations
- Provide user-friendly error messages with retry options
- Track errors in analytics for monitoring
- Use AbortController for proper request cancellation
- Validate data before caching to prevent corruption

## Accessibility Standards
- Use proper ARIA labels and live regions
- Implement keyboard navigation support
- Ensure screen reader friendly structure
- Use semantic HTML5 elements
- Include alt text for all images
- Maintain proper heading hierarchy (h1, h2, h3, etc.)
- Use role="list" for event lists
- Implement aria-live="polite" for dynamic content updates

## Code Modification Standards
- **ONLY make changes that are explicitly requested by the user**
- **NEVER modify code that the user did not ask to be changed**
- **Make minimal, targeted changes - only touch what needs to be fixed**
- **If fixing one issue, do not modify unrelated code**
- **When asked to fix a specific problem, only fix that problem**
- **Do not "improve" or "enhance" code unless specifically requested**
- **Do not add new features or functionality unless explicitly asked**
- **Preserve existing code structure and styling unless specifically asked to change it**
- **If unsure whether a change is needed, ask the user first**

## Post-Fix Analysis Requirements
- **MANDATORY: After fixing any code issue, analyze the root cause of the error**
- **MANDATORY: Update relevant MDC files to prevent the same error from recurring**
- **MANDATORY: Document the specific error pattern and how to avoid it**
- **MANDATORY: Add preventive measures to coding standards**
- **MANDATORY: Consider if the error indicates a broader systemic issue**
- **MANDATORY: Update any related standards that could prevent similar issues**
- **This process ensures continuous improvement and prevents recurring mistakes**

## Critical JavaScript Loading Standards
- **NEVER use `type="module"` on regular JavaScript files**
- **ALWAYS verify JavaScript files load without errors before deployment**
- **If a JavaScript file uses ES6 import/export, it MUST be loaded with `type="module"`**
- **If a JavaScript file does NOT use import/export, it MUST be loaded WITHOUT `type="module"`**
- **Test all JavaScript loading in browser console to catch module errors early**
- **Module loading errors can break entire websites - this is a CRITICAL requirement**